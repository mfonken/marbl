// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef __BLE_SOC_CALLBACKS__
#define __BLE_SOC_CALLBACKS__


#include <stdint.h>
#include <stdbool.h>


/***********************************************************************************************//**
 *  \brief  Advertising started.
 *  \details  This function is called by the advertising plugin after advertising has been started.
 **************************************************************************************************/
void emberAfPluginAdvertisingStartedCallback(void);

/***********************************************************************************************//**
 *  \brief  Advertising stopped.
 *  \details  This function is called by the advertising plugin after advertising has been stopped.
 **************************************************************************************************/
void emberAfPluginAdvertisingStoppedCallback(void);

/** @brief Reset
 *
 * This function is called by the app_cfg plugin after a Reset event was detected. 
 *
 * @param None.
 */
void emberAfPluginResetEventCallback(void);

/***********************************************************************************************//**
 *  \brief  Connection started.
 *  \details  This function is called by the app_cfg plugin after a a connection is made.
 **************************************************************************************************/
void emberAfPluginConnectionOpenedEventCallback(void);

/***********************************************************************************************//**
 *  \brief  Connection terminated.
 *  \details  This function is called by the app_cfg plugin after a a connection is termninated.
 **************************************************************************************************/
void emberAfPluginConnectionTerminatedEventCallback(void);

/***********************************************************************************************//**
 *  \brief  Connection parameters.
 *  \details  This function is called by the app_cfg plugin after a a connection is opened or its
 *  parameters are changed.
 *  \param[in]  connection  ConnectionId.
 *  \param[in]  interval  Interval.
 *  \param[in]  latency  Latency.
 *  \param[in]  timeout  Timeout.
 *  \param[in]  security_mode  Security mode.
 **************************************************************************************************/
void emberAfPluginConnectionParametersEventCallback(uint8_t connection,
                                                    uint16_t interval,
                                                    uint16_t latency,
                                                    uint16_t timeout,
                                                    uint8_t security_mode);

/***********************************************************************************************//**
 *  \brief  A characer is about to be sent out.
 *  \details  This function is called by the HID plugin before it is sending a new character over
 *  BT.
 *  \param  CharCode  ASCII code of character to be sent.
 **************************************************************************************************/
void emberAfPluginHidSendNewCharCallback(uint8_t CharCode);

/***********************************************************************************************//**
 *  \brief  Ok To Sleep.
 *  \details  This function is called by the Idle/Sleep plugin before sleeping. It is called with
 *  interrupts disabled. The application should return TRUE if the device may sleep or FALSE
 *  otherwise.
 *  \param  durationMs  The maximum duration in milliseconds that the device will sleep.
 *  \return  true  if it is Ok to sleep.
 **************************************************************************************************/
bool emberAfPluginIdleSleepOkToSleepCallback(uint32_t durationMs);

/***********************************************************************************************//**
 *  \brief  Wake Up.
 *  \details  This function is called by the Idle/Sleep plugin after sleeping.
 *  \param  durationMs  The duration in milliseconds that the device slept.
 **************************************************************************************************/
void emberAfPluginIdleSleepWakeUpCallback(uint32_t durationMs);

/** @brief Main Stack Init on EFR32
 *
 * This function is called when the stack on the EFR32 starts and can be used to perform necessary
 * initialization required at system startup.
 */
void emberAfMainEfr32StackInitCallback(void);

/** @brief Main Application Init on EFR32
 *
 * This function is called when the application on the EFR32 starts and can be used to perform any
 * additional initialization required at system startup.
 */
void emberAfMainEfr32AppInitCallback(void);

/** @brief Main Stack Init on Host
 *
 * This function is called when the stack on the Host starts and can be used to perform necessary
 * initialization required at system startup.
 */
int emberAfMainHostStackInitCallback(int argc, char* argv[]);

/** @brief Main Application Init on Host
 *
 * This function is called when the application on the host starts and can be used to perform any
 * additional initialization required at system startup.
 */
void emberAfMainHostAppInitCallback(void);

/** @brief Main Stack Tick
 *
 * This function is called in each iteration of the main stack loop and
 * can be used to perform periodic functions.  The frequency with which this
 * function is called depends on how quickly the main loop runs.  If the
 * application blocks at any time during the main loop, this function will not
 * be called until execution resumes.  On SoC platforms, sleeping and idling
 * will block.  On Unix hosts, process yielding (e.g., via select) will block.
 */
void emberAfMainStackTickCallback(void);

/** @brief Main Application Tick
 *
 * This function is called in each iteration of the main application loop and
 * can be used to perform periodic functions.  The frequency with which this
 * function is called depends on how quickly the main loop runs.  If the
 * application blocks at any time during the main loop, this function will not
 * be called until execution resumes.  On SoC platforms, sleeping and idling
 * will block.  On Unix hosts, process yielding (e.g., via select) will block.
 */
void emberAfMainAppTickCallback(void);

#endif // __BLE_SOC_CALLBACKS__
