                                - armv7m_cpu_a -                      Page    1

    1                           ;
    2                           ;*********************************************
                                ***********************************************
                                ************
    3                           ;                                             
                                 Micrium OS
    4                           ;                                             
                                    CPU
    5                           ;
    6                           ;                             (c) Copyright
                                 2004; Silicon Laboratories Inc.
    7                           ;                                       
                                 https://www.micrium.com
    8                           ;
    9                           ;*********************************************
                                ***********************************************
                                ************
   10                           ; Licensing:
   11                           ;           YOUR USE OF THIS SOFTWARE IS
                                 SUBJECT TO THE TERMS OF A MICRIUM SOFTWARE
                                 LICENSE.
   12                           ;   If you are not willing to accept the terms
                                 of an appropriate Micrium Software License,
                                 you must not
   13                           ;   download or use this software for any
                                 reason.
   14                           ;   Information about Micrium software
                                 licensing is available at https://www.micrium.
                                com/licensing/
   15                           ;   It is your obligation to select an
                                 appropriate license based on your intended use
                                 of the Micrium OS.
   16                           ;   Unless you have executed a Micrium
                                 Commercial License, your use of the Micrium OS
                                 is limited to
   17                           ;   evaluation, educational or personal
                                 non-commercial uses. The Micrium OS may not be
                                 redistributed or
   18                           ;   disclosed to any third party without the
                                 written consent of Silicon Laboratories
                                 Inc.
   19                           ;*********************************************
                                ***********************************************
                                ************
   20                           ; Documentation:
   21                           ;   You can find user manuals, API references,
                                 release notes and more at: https://doc.micrium
                                .com
   22                           ;*********************************************
                                ***********************************************
                                ************
   23                           ; Technical Support:
   24                           ;   Support is available for commercially
                                 licensed users of Micrium's software. For
                                 additional
   25                           ;   information on support, you can contact
                                 info@micrium.com.
   26                           ;*********************************************
                                ***********************************************
                                ************
   27                           ;
   28                           
   29                           ;
   30                           ;*********************************************
                                ***********************************************
                                ************
   31                           ;
   32                           ;                                          
                                 ARM Cortex-M Port
   33                           ;
   34                           ; File : armv7m_cpu_a.asm
   35                           ;*********************************************
                                ***********************************************
                                ************
   36                           ; Note(s) : (1) This port targets the
                                 following:
   37                           ;                 Core      : ARMv7M
                                 Cortex-M
                                - armv7m_cpu_a -                      Page    2

   38                           ;                 Mode      : Thumb-2
                                 ISA
   39                           ;                 Toolchain : IAR EWARM
   40                           ;*********************************************
                                ***********************************************
                                ************
   41                           ;
   42                           
   43                           
   44                           ;*********************************************
                                ***********************************************
                                ************
   45                           ;                                          
                                 PUBLIC FUNCTIONS
   46                           ;*********************************************
                                ***********************************************
                                ************
   47                           
   48                                   PUBLIC  CPU_IntDis
   49                                   PUBLIC  CPU_IntEn
   50                           
   51                                   PUBLIC  CPU_SR_Save
   52                                   PUBLIC  CPU_SR_Restore
   53                           
   54                                   PUBLIC  CPU_WaitForInt
   55                                   PUBLIC  CPU_WaitForExcept
   56                           
   57                           
   58                                   PUBLIC  CPU_CntLeadZeros
   59                                   PUBLIC  CPU_CntTrailZeros
   60                                   PUBLIC  CPU_RevBits
   61                           
   62                           
   63                           ;*********************************************
                                ***********************************************
                                ************
   64                           ;                                      CODE
                                 GENERATION DIRECTIVES
   65                           ;*********************************************
                                ***********************************************
                                ************
   66                           
   67                                   RSEG CODE:CODE:NOROOT(2)
   68                                   THUMB
   69                           
   70                           ;*********************************************
                                ***********************************************
                                ************
   71                           ;                                    DISABLE
                                 and ENABLE INTERRUPTS
   72                           ;
   73                           ; Description: Disable/Enable interrupts.
   74                           ;
   75                           ; Prototypes : void  CPU_IntDis(void);
   76                           ;              void  CPU_IntEn (void);
   77                           ;*********************************************
                                ***********************************************
                                ************
   78                           
   79                           CPU_IntDis
   80    00000000 72B6                  CPSID   I
   81    00000002 7047                  BX      LR
   82                           
   83                           
   84                           CPU_IntEn
   85    00000004 62B6                  CPSIE   I
   86    00000006 7047                  BX      LR
   87                           
   88                           
   89                           ;*********************************************
                                ***********************************************
                                ************
   90                           ;                                     
                                 CRITICAL SECTION FUNCTIONS
   91                           ;
   92                           ; Description : Disable/Enable interrupts by
                                 preserving the state of interrupts.  Generally
                                 speaking, the
                                - armv7m_cpu_a -                      Page    3

   93                           ;               state of the interrupt disable
                                 flag is stored in the local variable 'cpu_sr'
                                 & interrupts
   94                           ;               are then disabled ('cpu_sr' is
                                 allocated in all functions that need to
                                 disable interrupts).
   95                           ;               The previous interrupt state
                                 is restored by copying 'cpu_sr' into the CPU's
                                 status register.
   96                           ;
   97                           ; Prototypes  : CPU_SR  CPU_SR_Save  
                                 (void);
   98                           ;               void    CPU_SR_Restore(CPU_SR 
                                 cpu_sr);
   99                           ;
  100                           ; Note(s)     : (1) These functions are used
                                 in general like this :
  101                           ;
  102                           ;                       void  Task (void 
                                 *p_arg)
  103                           ;                       {
  104                           ;                           CPU_SR_ALLOC();   
                                                  /* Allocate storage for CPU
                                 status register */
  105                           ;                               :
  106                           ;                               :
  107                           ;                           CPU_CRITICAL_ENTER
                                ();               /* cpu_sr = CPU_SR_Save();   
                                               */
  108                           ;                               :
  109                           ;                               :
  110                           ;                           CPU_CRITICAL_EXIT(
                                );                /* CPU_SR_Restore(cpu_sr);   
                                               */
  111                           ;                               :
  112                           ;                       }
  113                           ;*********************************************
                                ***********************************************
                                ************
  114                           
  115                           CPU_SR_Save
  116    00000008 EFF31080              MRS     R0, PRIMASK                    
                                                 ; Set prio int mask to mask
                                                 all (except faults)
  117    0000000C 72B6                  CPSID   I
  118    0000000E 7047                  BX      LR
  119                           
  120                           
  121                           CPU_SR_Restore                                
                                  ; See Note #2.
  122    00000010 80F31088              MSR     PRIMASK, R0
  123    00000014 7047                  BX      LR
  124                           
  125                           
  126                           ;*********************************************
                                ***********************************************
                                ************
  127                           ;                                         WAIT
                                 FOR INTERRUPT
  128                           ;
  129                           ; Description : Enters sleep state, which will
                                 be exited when an interrupt is received.
  130                           ;
  131                           ; Prototypes  : void  CPU_WaitForInt
                                 (void)
  132                           ;
  133                           ; Argument(s) : none.
  134                           ;*********************************************
                                ***********************************************
                                ************
  135                           
  136                           CPU_WaitForInt:
  137    00000016 30BF                  WFI                                    
  ; Wait for interrupt
  138    00000018 7047                  BX      LR
  139                           
  140                           
  141                           ;*********************************************
                                - armv7m_cpu_a -                      Page    4

                                ***********************************************
                                ************
  142                           ;                                         WAIT
                                 FOR EXCEPTION
  143                           ;
  144                           ; Description : Enters sleep state, which will
                                 be exited when an exception is received.
  145                           ;
  146                           ; Prototypes  : void  CPU_WaitForExcept
                                 (void)
  147                           ;
  148                           ; Argument(s) : none.
  149                           ;*********************************************
                                ***********************************************
                                ************
  150                           
  151                           CPU_WaitForExcept:
  152    0000001A 20BF                  WFE                                    
  ; Wait for exception
  153    0000001C 7047                  BX      LR
  154                           
  155                           
  156                           ;*********************************************
                                ***********************************************
                                ************
  157                           ;                                        
                                 CPU_CntLeadZeros()
  158                           ;                                        COUNT
                                 LEADING ZEROS
  159                           ;
  160                           ; Description : Counts the number of
                                 contiguous, most-significant, leading zero
                                 bits before the 
  161                           ;                   first binary one bit in a
                                 data value.
  162                           ;
  163                           ; Prototype   : CPU_DATA  CPU_CntLeadZeros(CPU
                                _DATA  val);
  164                           ;
  165                           ; Argument(s) : val         Data value to
                                 count leading zero bits.
  166                           ;
  167                           ; Return(s)   : Number of contiguous,
                                 most-significant, leading zero bits in
                                 'val'.
  168                           ;
  169                           ; Caller(s)   : Application.
  170                           ;
  171                           ;               This function is an INTERNAL
                                 CPU module function but MAY be called by
                                 application 
  172                           ;               function(s).
  173                           ;
  174                           ; Note(s)     : (1) (a) Supports 32-bit data
                                 value size as configured by 'CPU_DATA' (see
                                 'cpu.h  
  175                           ;                       CPU WORD CONFIGURATION
                                  Note #1').
  176                           ;
  177                           ;                   (b) For 32-bit values
                                 :
  178                           ;
  179                           ;                             b31  b30  b29 
                                 ...  b04  b03  b02  b01  b00    # Leading
                                 Zeros
  180                           ;                             ---  ---  ---   
                                    ---  ---  ---  ---  ---    ---------------
  181                           ;                              1    x    x    
                                     x    x    x    x    x           
                                 0
  182                           ;                              0    1    x    
                                     x    x    x    x    x           
                                 1
  183                           ;                              0    0    1    
                                     x    x    x    x    x           
                                 2
  184                           ;                              :    :    :    
                                     :    :    :    :    :           
                                - armv7m_cpu_a -                      Page    5

                                 :
  185                           ;                              :    :    :    
                                     :    :    :    :    :           
                                 :
  186                           ;                              0    0    0    
                                     1    x    x    x    x           27
  187                           ;                              0    0    0    
                                     0    1    x    x    x           28
  188                           ;                              0    0    0    
                                     0    0    1    x    x           29
  189                           ;                              0    0    0    
                                     0    0    0    1    x           30
  190                           ;                              0    0    0    
                                     0    0    0    0    1           31
  191                           ;                              0    0    0    
                                     0    0    0    0    0           32
  192                           ;
  193                           ;
  194                           ;               (2) MUST be defined in
                                 'cpu_a.asm' (or 'cpu_c.c') if CPU_CFG_LEAD_ZER
                                OS_ASM_PRESENT is 
  195                           ;                   #define'd in 'cpu_port.h'
  196                           ;*********************************************
                                ***********************************************
                                ************
  197                           
  198                           CPU_CntLeadZeros:
  199    0000001E B0FA80F0              CLZ     R0, R0                         
                                                 ; Count leading zeros
  200    00000022 7047                  BX      LR
  201                           
  202                           
  203                           ;*********************************************
                                ***********************************************
                                ************
  204                           ;                                        
                                 CPU_CntTrailZeros()
  205                           ;                                        COUNT
                                 TRAILING ZEROS
  206                           ;
  207                           ; Description : Counts the number of
                                 contiguous, least-significant, trailing zero
                                 bits before the 
  208                           ;                   first binary one bit in a
                                 data value.
  209                           ;
  210                           ; Prototype   : CPU_DATA  CPU_CntTrailZeros(CP
                                U_DATA  val);
  211                           ;
  212                           ; Argument(s) : val         Data value to
                                 count trailing zero bits.
  213                           ;
  214                           ; Return(s)   : Number of contiguous,
                                 least-significant, trailing zero bits in
                                 'val'.
  215                           ;
  216                           ; Caller(s)   : Application.
  217                           ;
  218                           ;               This function is an INTERNAL
                                 CPU module function but MAY be called by
                                 application 
  219                           ;               function(s).
  220                           ;
  221                           ; Note(s)     : (1) (a) Supports 32-bit data
                                 value size as configured by 'CPU_DATA' (see
                                 'cpu.h  
  222                           ;                       CPU WORD CONFIGURATION
                                  Note #1').
  223                           ;
  224                           ;                   (b) For 32-bit values
                                 :
  225                           ;
  226                           ;                             b31  b30  b29 
                                 b28  b27  ...  b02  b01  b00    # Trailing
                                 Zeros
  227                           ;                             ---  ---  --- 
                                 ---  ---       ---  ---  ---    --------------
                                --
                                - armv7m_cpu_a -                      Page    6

  228                           ;                              x    x    x   
                                 x    x         x    x    1           
                                 0
  229                           ;                              x    x    x   
                                 x    x         x    1    0           
                                 1
  230                           ;                              x    x    x   
                                 x    x         1    0    0           
                                 2
  231                           ;                              :    :    :   
                                 :    :         :    :    :           
                                 :
  232                           ;                              :    :    :   
                                 :    :         :    :    :           
                                 :
  233                           ;                              x    x    x   
                                 x    1         0    0    0          
                                 27
  234                           ;                              x    x    x   
                                 1    0         0    0    0          
                                 28
  235                           ;                              x    x    1   
                                 0    0         0    0    0          
                                 29
  236                           ;                              x    1    0   
                                 0    0         0    0    0          
                                 30
  237                           ;                              1    0    0   
                                 0    0         0    0    0          
                                 31
  238                           ;                              0    0    0   
                                 0    0         0    0    0          
                                 32
  239                           ;
  240                           ;
  241                           ;               (2) MUST be defined in
                                 'cpu_a.asm' (or 'cpu_c.c') if CPU_CFG_TRAIL_ZE
                                ROS_ASM_PRESENT is 
  242                           ;                   #define'd in 'cpu_cfg.h'
                                 or 'cpu.h'.
  243                           ;*********************************************
                                ***********************************************
                                ************
  244                           
  245                           CPU_CntTrailZeros:
  246    00000024 90FAA0F0              RBIT    R0, R0                         
                                                 ; Reverse bits
  247    00000028 B0FA80F0              CLZ     R0, R0                         
                                                 ; Count trailing zeros
  248    0000002C 7047                  BX      LR
  249                           
  250                           
  251                           ;*********************************************
                                ***********************************************
                                ************
  252                           ;                                           
                                 CPU_RevBits()
  253                           ;                                           
                                 REVERSE BITS
  254                           ;
  255                           ; Description : Reverses the bits in a data
                                 value.
  256                           ;
  257                           ; Prototypes  : CPU_DATA  CPU_RevBits(CPU_DATA
                                  val);
  258                           ;
  259                           ; Argument(s) : val         Data value to
                                 reverse bits.
  260                           ;
  261                           ; Return(s)   : Value with all bits in 'val'
                                 reversed (see Note #1).
  262                           ;
  263                           ; Caller(s)   : Application.
  264                           ;
  265                           ;               This function is an INTERNAL
                                 CPU module function but MAY be called by
                                 application function(s).
  266                           ;
                                - armv7m_cpu_a -                      Page    7

  267                           ; Note(s)     : (1) The final, reversed data
                                 value for 'val' is such that :
  268                           ;
  269                           ;                       'val's final bit  0   
                                    =  'val's original bit  N
  270                           ;                       'val's final bit  1   
                                    =  'val's original bit (N - 1)
  271                           ;                       'val's final bit  2   
                                    =  'val's original bit (N - 2)
  272                           ;
  273                           ;                               ...           
                                                ...
  274                           ;
  275                           ;                       'val's final bit (N -
                                 2)  =  'val's original bit  2
  276                           ;                       'val's final bit (N -
                                 1)  =  'val's original bit  1
  277                           ;                       'val's final bit  N   
                                    =  'val's original bit  0
  278                           ;*********************************************
                                ***********************************************
                                ************
  279                           
  280                           CPU_RevBits:
  281    0000002E 90FAA0F0              RBIT    R0, R0                         
                                                 ; Reverse bits
  282    00000032 7047                  BX      LR
  283                           
  284                           
  285                           ;*********************************************
                                ***********************************************
                                ************
  286                           ;                                     CPU
                                 ASSEMBLY PORT FILE END
  287                           ;*********************************************
                                ***********************************************
                                ************
  288                           
  289                                   END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 52          #
##############################



