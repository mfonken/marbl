                              - armv7m_os_cpu_a -                     Page    1

    1                           ;
    2                           ;*********************************************
                                ***********************************************
                                ************
    3                           ;                                             
                                 Micrium OS
    4                           ;                                             
                                   Kernel
    5                           ;
    6                           ;                             (c) Copyright
                                 2009; Silicon Laboratories Inc.
    7                           ;                                       
                                 https://www.micrium.com
    8                           ;
    9                           ;*********************************************
                                ***********************************************
                                ************
   10                           ; Licensing:
   11                           ;           YOUR USE OF THIS SOFTWARE IS
                                 SUBJECT TO THE TERMS OF A MICRIUM SOFTWARE
                                 LICENSE.
   12                           ;   If you are not willing to accept the terms
                                 of an appropriate Micrium Software License,
                                 you must not
   13                           ;   download or use this software for any
                                 reason.
   14                           ;   Information about Micrium software
                                 licensing is available at https://www.micrium.
                                com/licensing/
   15                           ;   It is your obligation to select an
                                 appropriate license based on your intended use
                                 of the Micrium OS.
   16                           ;   Unless you have executed a Micrium
                                 Commercial License, your use of the Micrium OS
                                 is limited to
   17                           ;   evaluation, educational or personal
                                 non-commercial uses. The Micrium OS may not be
                                 redistributed or
   18                           ;   disclosed to any third party without the
                                 written consent of Silicon Laboratories
                                 Inc.
   19                           ;*********************************************
                                ***********************************************
                                ************
   20                           ; Documentation:
   21                           ;   You can find user manuals, API references,
                                 release notes and more at: https://doc.micrium
                                .com
   22                           ;*********************************************
                                ***********************************************
                                ************
   23                           ; Technical Support:
   24                           ;   Support is available for commercially
                                 licensed users of Micrium's software. For
                                 additional
   25                           ;   information on support, you can contact
                                 info@micrium.com.
   26                           ;*********************************************
                                ***********************************************
                                ************
   27                           ;
   28                           
   29                           ;
   30                           ;*********************************************
                                ***********************************************
                                ************
   31                           ;
   32                           ;                                          
                                 ARM Cortex-M Port
   33                           ;
   34                           ; File : armv7m_os_cpu_a.asm
   35                           ;*********************************************
                                ***********************************************
                                ************
   36                           ; Note(s) : (1) This port targets the
                                 following:
   37                           ;                 Core      : ARMv7M
                                 Cortex-M
                              - armv7m_os_cpu_a -                     Page    2

   38                           ;                 Mode      : Thumb-2
                                 ISA
   39                           ;                 Toolchain : IAR EWARM
   40                           ;
   41                           ;           (2) This port supports the ARM
                                 Cortex-M3, Cortex-M4 and Cortex-M7 architectur
                                es.
   42                           ;
   43                           ;           (3) It has been tested with the
                                 following Hardware Floating Point Unit.
   44                           ;                 (a) Single-precision:
                                 FPv4-SP-D16-M and FPv5-SP-D16-M
   45                           ;                 (b) Double-precision:
                                 FPv5-D16-M
   46                           ;*********************************************
                                ***********************************************
                                ************
   47                           ;
   48                           
   49                           
   50                           ;*********************************************
                                ***********************************************
                                ************
   51                           ;                                         
                                 PUBLIC FUNCTIONS
   52                           ;*********************************************
                                ***********************************************
                                ************
   53                           
   54                                                                         
                                                  ; External references.
   55                               EXTERN  OSPrioCur
   56                               EXTERN  OSPrioHighRdy
   57                               EXTERN  OSTCBCurPtr
   58                               EXTERN  OSTCBHighRdyPtr
   59                               EXTERN  OSIntExit
   60                               EXTERN  OSTaskSwHook
   61                               EXTERN  OS_CPU_ExceptStkBase
   62                           
   63                           
   64                               PUBLIC  OSStartHighRdy                    
                                                  ; Functions declared in this
                                 file
   65                               PUBLIC  OSCtxSw
   66                               PUBLIC  OSIntCtxSw
   67                               PUBLIC  PendSV_Handler
   68                           
   69                           
   70                           #ifdef __ARMVFP__
   71                               PUBLIC  OS_CPU_FP_Reg_Push
   72                               PUBLIC  OS_CPU_FP_Reg_Pop
   73                           #endif
   74                           
   75                           
   76                           ;*********************************************
                                ***********************************************
                                ************
   77                           ;                                             
                                  EQUATES
   78                           ;*********************************************
                                ***********************************************
                                ************
   79                           
   80                           NVIC_INT_CTRL   EQU     0xE000ED04            
                                                  ; Interrupt control state
                                 register.
   81                           NVIC_SYSPRI14   EQU     0xE000ED22            
                                                  ; System priority register
                                 (priority 14).
   82                           NVIC_PENDSV_PRI EQU           0xFF            
                                                  ; PendSV priority value
                                 (lowest).
   83                           NVIC_PENDSVSET  EQU     0x10000000            
                                                  ; Value to trigger PendSV
                                 exception.
   84                           
   85                           
   86                           ;*********************************************
                              - armv7m_os_cpu_a -                     Page    3

                                ***********************************************
                                ************
   87                           ;                                     CODE
                                 GENERATION DIRECTIVES
   88                           ;*********************************************
                                ***********************************************
                                ************
   89                           
   90                               RSEG CODE:CODE:NOROOT(2)
   91                               THUMB
   92                           
   93                           
   94                           ;*********************************************
                                ***********************************************
                                ************
   95                           ;                                   FLOATING
                                 POINT REGISTERS PUSH
   96                           ;                             void  OS_CPU_FP_
                                Reg_Push (CPU_STK  *stkPtr)
   97                           ;
   98                           ; Note(s) : 1) This function saves S16-S31
                                 registers of the Floating Point Unit.
   99                           ;
  100                           ;           2) Pseudo-code is:
  101                           ;              a) Push remaining FPU regs
                                 S16-S31 on process stack;
  102                           ;              b) Update OSTCBCurPtr->StkPtr;
  103                           ;*********************************************
                                ***********************************************
                                ************
  104                           
  105                           #ifdef __ARMVFP__
  106                           OS_CPU_FP_Reg_Push
  107    00000000 EFF30981          MRS     R1, PSP                            
                                                             ; PSP is process
                                             stack pointer
  108    00000004 21B1              CBZ     R1, OS_CPU_FP_nosave               
                                                                  ; Skip FP
                                                  register save the first
                                                  time
  109                           
  110    00000006 20ED108A          VSTMDB  R0!, {S16-S31}
  111    0000000A 3B49              LDR     R1, =OSTCBCurPtr
  112    0000000C 0A68              LDR     R2, [R1]
  113    0000000E 1060              STR     R0, [R2]
  114                           OS_CPU_FP_nosave
  115    00000010 7047              BX      LR
  116                           #endif
  117                           
  118                           
  119                           ;*********************************************
                                ***********************************************
                                ************
  120                           ;                                   FLOATING
                                 POINT REGISTERS POP
  121                           ;                             void  OS_CPU_FP_
                                Reg_Pop (CPU_STK  *stkPtr)
  122                           ;
  123                           ; Note(s) : 1) This function restores S16-S31
                                 of the Floating Point Unit.
  124                           ;
  125                           ;           2) Pseudo-code is:
  126                           ;              a) Restore regs S16-S31 of new
                                 process stack;
  127                           ;              b) Update OSTCBHighRdyPtr->StkP
                                tr pointer of new process stack;
  128                           ;*********************************************
                                ***********************************************
                                ************
  129                           
  130                           #ifdef __ARMVFP__
  131                           OS_CPU_FP_Reg_Pop
  132    00000012 B0EC108A          VLDMIA  R0!, {S16-S31}
  133    00000016 3949              LDR     R1, =OSTCBHighRdyPtr
  134    00000018 0A68              LDR     R2, [R1]
  135    0000001A 1060              STR     R0, [R2]
  136    0000001C 7047              BX      LR
  137                           #endif
                              - armv7m_os_cpu_a -                     Page    4

  138                           
  139                           
  140                           ;*********************************************
                                ***********************************************
                                ************
  141                           ;                                        
                                 START MULTITASKING
  142                           ;                                      void
                                 OSStartHighRdy(void)
  143                           ;
  144                           ; Note(s) : 1) This function setup the PendSV
                                 exception and load the context of the first
                                 task to start.
  145                           ;
  146                           ;           2) OSStartHighRdy() MUST:
  147                           ;              a) Setup PendSV exception
                                 priority to lowest;
  148                           ;              b) Set initial PSP to
                                 0;
  149                           ;              c) Set the main stack to
                                 OS_CPU_ExceptStkBase
  150                           ;              d) Get current high priority,
                                 OSPrioCur = OSPrioHighRdy;
  151                           ;              e) Get current ready thread
                                 TCB, OSTCBCurPtr = OSTCBHighRdyPtr;
  152                           ;              f) Get new process SP from TCB,
                                 SP = OSTCBHighRdyPtr->StkPtr;
  153                           ;              g) Restore R0-R11 and R14 from
                                 new process stack;
  154                           ;              h) Enable interrupts (tasks
                                 will run with interrupts enabled).
  155                           ;*********************************************
                                ***********************************************
                                ************
  156                           
  157                           OSStartHighRdy
  158    0000001E 72B6              CPSID   I                                  
                                                             ; Prevent
                                             interruption during context
                                             switch
  159    00000020 4EF62250CEF20     MOV32   R0, NVIC_SYSPRI14                  
                                                             ; Set the PendSV
                                             exception priority
                  000          
  160    00000028 40F2FF01C0F20     MOV32   R1, NVIC_PENDSV_PRI
                  001          
  161    00000030 0170              STRB    R1, [R0]
  162                           
  163    00000032 0020              MOVS    R0, #0                             
                                                             ; Set the PSP to 0
                                             for initial context switch
                                             call
  164    00000034 80F30988          MSR     PSP, R0
  165                           
  166    00000038 .............     MOV32   R0, OS_CPU_ExceptStkBase           
                                                             ; Initialize the
                                             MSP to the OS_CPU_ExceptStkBase
                  ...          
  167    00000040 0168              LDR     R1, [R0]
  168    00000042 81F30888          MSR     MSP, R1
  169                           
  170    00000046 ........          BL      OSTaskSwHook                       
                                                             ; Call OSTaskSwHoo
                                            k() for FPU Push & Pop
  171                           
  172    0000004A .............     MOV32   R0, OSPrioCur                      
                                                             ; OSPrioCur   =
                                             OSPrioHighRdy;
                  ...          
  173    00000052 .............     MOV32   R1, OSPrioHighRdy
                  ...          
  174    0000005A 0A78              LDRB    R2, [R1]
  175    0000005C 0270              STRB    R2, [R0]
  176                           
  177    0000005E .............     MOV32   R0, OSTCBCurPtr                    
                                                             ; OSTCBCurPtr =
                                             OSTCBHighRdyPtr;
                  ...          
                              - armv7m_os_cpu_a -                     Page    5

  178    00000066 .............     MOV32   R1, OSTCBHighRdyPtr
                  ...          
  179    0000006E 0A68              LDR     R2, [R1]
  180    00000070 0260              STR     R2, [R0]
  181                           
  182    00000072 1068              LDR     R0, [R2]                           
                                                             ; R0 is new
                                             process SP; SP = OSTCBHighRdyPtr->
                                            StkPtr;
  183    00000074 80F30988          MSR     PSP, R0                            
                                                             ; Load PSP with
                                             new process SP
  184                           
  185    00000078 EFF31480          MRS     R0, CONTROL
  186    0000007C 40F00200          ORR     R0, R0, #2
  187    00000080 80F31488          MSR     CONTROL, R0
  188    00000084 BFF36F8F          ISB                                        
                  ; Sync instruction stream
  189                           
  190    00000088 BDE8F04F          LDMFD    SP!, {R4-R11, LR}                 
                                                              ; Restore r4-11,
                                              lr from new process stack
  191    0000008C 0FBC              LDMFD    SP!, {R0-R3}                      
                                                              ; Restore r0,
                                              r3
  192    0000008E BDE80050          LDMFD    SP!, {R12, LR}                    
                                                              ; Load R12 and
                                              LR
  193    00000092 06BC              LDMFD    SP!, {R1, R2}                     
                                                              ; Load PC and
                                              discard xPSR
  194    00000094 62B6              CPSIE    I
  195    00000096 0847              BX       R1
  196                           
  197                           
  198                           ;*********************************************
                                ***********************************************
                                ************
  199                           ;                       PERFORM A CONTEXT
                                 SWITCH (From task level) - OSCtxSw()
  200                           ;
  201                           ; Note(s) : 1) OSCtxSw() is called when OS
                                 wants to perform a task context switch.  This
                                 function
  202                           ;              triggers the PendSV exception
                                 which is where the real work is done.
  203                           ;*********************************************
                                ***********************************************
                                ************
  204                           
  205                           OSCtxSw
  206    00000098 1948              LDR     R0, =NVIC_INT_CTRL                 
                                                             ; Trigger the
                                             PendSV exception (causes context
                                             switch)
  207    0000009A 1A49              LDR     R1, =NVIC_PENDSVSET
  208    0000009C 0160              STR     R1, [R0]
  209    0000009E 7047              BX      LR
  210                           
  211                           
  212                           ;*********************************************
                                ***********************************************
                                ************
  213                           ;                   PERFORM A CONTEXT SWITCH
                                 (From interrupt level) - OSIntCtxSw()
  214                           ;
  215                           ; Note(s) : 1) OSIntCtxSw() is called by
                                 OSIntExit() when it determines a context
                                 switch is needed as
  216                           ;              the result of an interrupt. 
                                 This function simply triggers a PendSV
                                 exception which will
  217                           ;              be handled when there are no
                                 more interrupts active and interrupts are
                                 enabled.
  218                           ;*********************************************
                                ***********************************************
                                ************
                              - armv7m_os_cpu_a -                     Page    6

  219                           
  220                           OSIntCtxSw
  221    000000A0 1748              LDR     R0, =NVIC_INT_CTRL                 
                                                             ; Trigger the
                                             PendSV exception (causes context
                                             switch)
  222    000000A2 1849              LDR     R1, =NVIC_PENDSVSET
  223    000000A4 0160              STR     R1, [R0]
  224    000000A6 7047              BX      LR
  225                           
  226                           
  227                           ;*********************************************
                                ***********************************************
                                ************
  228                           ;                                       HANDLE
                                 PendSV EXCEPTION
  229                           ;                                      void
                                 PendSV_Handler(void)
  230                           ;
  231                           ; Note(s) : 1) PendSV is used to cause a
                                 context switch.  This is a recommended method
                                 for performing
  232                           ;              context switches with Cortex-M.
                                  This is because the Cortex-M auto-saves half
                                 of the
  233                           ;              processor context on any
                                 exception, and restores same on return from
                                 exception.  So only
  234                           ;              saving of R4-R11 & R14 is
                                 required and fixing up the stack pointers.
                                 Using the PendSV exception
  235                           ;              this way means that context
                                 saving and restoring is identical whether it
                                 is initiated from
  236                           ;              a thread or occurs due to an
                                 interrupt or exception.
  237                           ;
  238                           ;           2) Pseudo-code is:
  239                           ;              a) Get the process SP
  240                           ;              b) Save remaining regs r4-r11 &
                                 r14 on process stack;
  241                           ;              c) Save the process SP in its
                                 TCB, OSTCBCurPtr->OSTCBStkPtr = SP;
  242                           ;              d) Call OSTaskSwHook();
  243                           ;              e) Get current high priority,
                                 OSPrioCur = OSPrioHighRdy;
  244                           ;              f) Get current ready thread
                                 TCB, OSTCBCurPtr = OSTCBHighRdyPtr;
  245                           ;              g) Get new process SP from TCB,
                                 SP = OSTCBHighRdyPtr->OSTCBStkPtr;
  246                           ;              h) Restore R4-R11 and R14 from
                                 new process stack;
  247                           ;              i) Perform exception return
                                 which will restore remaining context.
  248                           ;
  249                           ;           3) On entry into PendSV handler:
  250                           ;              a) The following have been
                                 saved on the process stack (by processor):
  251                           ;                 xPSR, PC, LR, R12,
                                 R0-R3
  252                           ;              b) Processor mode is switched
                                 to Handler mode (from Thread mode)
  253                           ;              c) Stack is Main stack
                                 (switched from Process stack)
  254                           ;              d) OSTCBCurPtr      points to
                                 the OS_TCB of the task to suspend
  255                           ;                 OSTCBHighRdyPtr  points to
                                 the OS_TCB of the task to resume
  256                           ;
  257                           ;           4) Since PendSV is set to lowest
                                 priority in the system (by OSStartHighRdy()
                                 above), we
  258                           ;              know that it will only be run
                                 when no other exception or interrupt is
                                 active, and
  259                           ;              therefore safe to assume that
                                 context being switched out was using the
                                 process stack (PSP).
                              - armv7m_os_cpu_a -                     Page    7

  260                           ;*********************************************
                                ***********************************************
                                ************
  261                           
  262                           PendSV_Handler
  263    000000A8 72B6              CPSID   I                                  
                                                             ; Prevent
                                             interruption during context
                                             switch
  264    000000AA EFF30980          MRS     R0, PSP                            
                                                             ; PSP is process
                                             stack pointer
  265    000000AE 20E9F04F          STMFD   R0!, {R4-R11, R14}                 
                                                             ; Save remaining
                                             regs r4-11, R14 on process
                                             stack
  266                           
  267    000000B2 .............     MOV32   R5, OSTCBCurPtr                    
                                                             ; OSTCBCurPtr->Stk
                                            Ptr = SP;
                  ...          
  268    000000BA 2968              LDR     R1, [R5]
  269    000000BC 0860              STR     R0, [R1]                           
                                                             ; R0 is SP of
                                             process being switched out
  270                           
  271                                                                         
                                                  ; At this point, entire
                                 context of process has been saved
  272    000000BE 7446              MOV     R4, LR                             
                                                             ; Save LR
                                             exc_return value
  273    000000C0 ........          BL      OSTaskSwHook                       
                                                             ; Call OSTaskSwHoo
                                            k() for FPU Push & Pop
  274                           
  275    000000C4 .............     MOV32   R0, OSPrioCur                      
                                                             ; OSPrioCur   =
                                             OSPrioHighRdy;
                  ...          
  276    000000CC .............     MOV32   R1, OSPrioHighRdy
                  ...          
  277    000000D4 0A78              LDRB    R2, [R1]
  278    000000D6 0270              STRB    R2, [R0]
  279                           
  280    000000D8 .............     MOV32   R1, OSTCBHighRdyPtr                
                                                             ; OSTCBCurPtr =
                                             OSTCBHighRdyPtr;
                  ...          
  281    000000E0 0A68              LDR     R2, [R1]
  282    000000E2 2A60              STR     R2, [R5]
  283                           
  284    000000E4 44F0040E          ORR     LR,  R4, #0x04                     
                                                             ; Ensure exception
                                             return uses process stack
  285    000000E8 1068              LDR     R0,  [R2]                          
                                                             ; R0 is new
                                             process SP; SP = OSTCBHighRdyPtr->
                                            StkPtr;
  286    000000EA B0E8F04F          LDMFD   R0!, {R4-R11, R14}                 
                                                             ; Restore r4-11,
                                             R14 from new process stack
  287    000000EE 80F30988          MSR     PSP, R0                            
                                                             ; Load PSP with
                                             new process SP
  288    000000F2 62B6              CPSIE   I
  289    000000F4 7047              BX      LR                                 
                                                             ; Exception return
                                             will restore remaining context
  290                           
  290.1                                  TABLE
  290.2  000000F8 ........              Reference on line 111
  290.3  000000FC ........              Reference on line 133
  290.4  00000100 04ED00E0              Reference on line 206,221
  290.5  00000104 00000010              Reference on line 207,222
  291                               END
##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 264         #
##############################



